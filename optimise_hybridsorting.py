import time
st=time.time()
def partition(array, low, high):
    pivot = array[high]
    i = low - 1
    for j in range(low, high):
        if array[j] <= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])
    (array[i + 1], array[high]) = (array[high], array[i + 1])
    return i + 1
def quickSort(array, low, high):
    if low < high:
        pi = partition(array, low, high)
        quickSort(array, low, pi - 1)
        quickSort(array, pi + 1, high)
def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        mergeSort(L)
        mergeSort(R)

        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] <= R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
def heapify(arr, N, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < N and arr[largest] < arr[l]:
        largest = l
    if r < N and arr[largest] < arr[r]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # swap
        heapify(arr, N, largest)
def heapSort(arr):
    N = len(arr)
    for i in range(N // 2 - 1, -1, -1):
        heapify(arr, N, i)
    for i in range(N - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
def merge_two(a, b):
    (m, n) = (len(a), len(b))
    i = j = 0
    d = []
    while i < m and j < n:
        if a[i] <= b[j]:
            d.append(a[i])
            i += 1
        else:
            d.append(b[j])
            j += 1
    while i < m:
        d.append(a[i])
        i += 1
    while j < n:
        d.append(b[j])
        j += 1
    return d
def merge(a, b, c):
    t = merge_two(a, b)
    return merge_two(t, c)
array = [1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,
         6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,
         8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10
    , 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,
         3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5
    ,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3
    ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78
    ,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7
    ,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6
    ,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32
    ,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9
    , -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,
         6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,
         5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,
         7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,
         6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,
         6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,
         8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10
    , 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,
         3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5
    ,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3
    ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78
    ,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7
    ,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6
    ,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32
    ,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9
    , -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,
         6,7,8,9,78,6,4,3,2,2,4,5,6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,
         5,6,3,4,5,6,7,8,9,9,0,7,8,8,1, 7, 4, 12, 10, 9, -2,5 ,4 ,3 ,2 ,6,8,6,4,2,5,
         7,9,4,2,4,6,8,6,5,4,2,4,2,5,7,9,0,8,6,5,3,2,2,3,4,6,7,8,9,78,6,4,3,2,2,4,5,
         6,76,8,9,9,0,1,32,4,5,6,7,8,3,4,5,6,7,8,9,90,5,4,5,6,3,4,5,6,7,8,9,9,0,7,8,8 ]
n=int(len(array))
d1,d2,d3=[],[],[]
for i in range(0,int(n/3)):
    d1.append(array[i])
for j in range(int(n/3),int(2*n/3)):
    d2.append(array[j])
for k in range(int(2*n/3),int(3*n/3)):
    d3.append(array[k])
print(d1,d2,d3)
quickSort(d1,0,len(d1)-1)
mergeSort(d2)
heapSort(d3)
print(d1,d2,d3)
d4=merge(d1,d2,d3)
print(d4)
et=time.time()
print(et-st)